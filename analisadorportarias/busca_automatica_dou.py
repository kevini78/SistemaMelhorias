#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo para busca autom√°tica de portarias de naturaliza√ß√£o no DOU
Baseado no conceito do Ro-DOU (https://github.com/gestaogovbr/Ro-dou)
"""

import requests
import pandas as pd
from datetime import datetime, timedelta
import time
import json
import os
from typing import List, Dict, Optional
from portaria_analyzer import PortariaAnalyzer

class BuscadorAutomaticoDOU:
    def __init__(self):
        """Inicializa o buscador autom√°tico do DOU"""
        self.base_url = "https://queridodiario.ok.org.br/api"
        self.analyzer = PortariaAnalyzer()
        
    def buscar_portarias_periodo(self, data_inicio: str, data_fim: str, 
                                palavras_chave: List[str] = None) -> List[Dict]:
        """
        Busca portarias de naturaliza√ß√£o em um per√≠odo espec√≠fico
        
        Args:
            data_inicio: Data de in√≠cio (YYYY-MM-DD)
            data_fim: Data de fim (YYYY-MM-DD)
            palavras_chave: Lista de palavras-chave para busca
            
        Returns:
            Lista de portarias encontradas
        """
        if palavras_chave is None:
            palavras_chave = [
                "naturaliza√ß√£o",
                "naturalizacao", 
                "PORTARIA",
                "nacionalidade brasileira",
                "art. 65",
                "art. 67", 
                "art. 70",
                "deferimento",
                "naturalizar",
                "naturalizado",
                "naturalizada",
                "cidadania brasileira",
                "brasileiro nato",
                "brasileira nata",
                "processo de naturaliza√ß√£o",
                "concess√£o de nacionalidade",
                "concessao de nacionalidade"
            ]
        
        print(f"üîç Buscando portarias de {data_inicio} at√© {data_fim}")
        print(f"üìù Palavras-chave: {', '.join(palavras_chave)}")
        
        portarias_encontradas = []
        
        try:
            # Buscar no DOU usando a API do Querido Di√°rio
            for palavra in palavras_chave:
                print(f"Buscando por: {palavra}")
                
                # Par√¢metros da busca
                params = {
                    'start_date': data_inicio,
                    'end_date': data_fim,
                    'keywords': palavra,
                    'gazettes': 'DOU',  # Apenas Di√°rio Oficial da Uni√£o
                    'size': 100  # M√°ximo de resultados por busca
                }
                
                response = requests.get(f"{self.base_url}/gazettes", params=params)
                
                if response.status_code == 200:
                    dados = response.json()
                    
                    if 'results' in dados:
                        for resultado in dados['results']:
                            # Verificar se √© uma portaria de naturaliza√ß√£o
                            if self._eh_portaria_naturalizacao(resultado):
                                portaria_info = {
                                    'url': resultado.get('url'),
                                    'data_publicacao': resultado.get('date'),
                                    'titulo': resultado.get('title', ''),
                                    'conteudo': resultado.get('content', ''),
                                    'palavra_encontrada': palavra
                                }
                                portarias_encontradas.append(portaria_info)
                                print(f"‚úÖ Encontrada: {resultado.get('title', 'Sem t√≠tulo')}")
                
                # Pausa para n√£o sobrecarregar a API
                time.sleep(1)
                
        except Exception as e:
            print(f"‚ùå Erro na busca: {e}")
        
        # Remover duplicatas baseado na URL
        portarias_unicas = []
        urls_vistas = set()
        
        for portaria in portarias_encontradas:
            if portaria['url'] not in urls_vistas:
                portarias_unicas.append(portaria)
                urls_vistas.add(portaria['url'])
        
        print(f"üìä Total de portarias √∫nicas encontradas: {len(portarias_unicas)}")
        return portarias_unicas
    
    def _eh_portaria_naturalizacao(self, resultado: Dict) -> bool:
        """
        Verifica se o resultado √© uma portaria de naturaliza√ß√£o
        
        Args:
            resultado: Dicion√°rio com dados do resultado da busca
            
        Returns:
            True se for portaria de naturaliza√ß√£o
        """
        titulo = resultado.get('title', '').lower()
        conteudo = resultado.get('content', '').lower()
        
        # Palavras-chave que indicam portaria de naturaliza√ß√£o
        indicadores = [
            'portaria',
            'naturaliza√ß√£o',
            'naturalizacao',
            'nacionalidade brasileira',
            'art. 65',
            'art. 67',
            'art. 70',
            'deferimento',
            'naturalizar',
            'naturalizado',
            'naturalizada',
            'cidadania brasileira',
            'brasileiro nato',
            'brasileira nata',
            'processo de naturaliza√ß√£o',
            'concess√£o de nacionalidade',
            'concessao de nacionalidade'
        ]
        
        # Verificar se cont√©m pelo menos 1 indicador (mais flex√≠vel)
        contadores = 0
        for indicador in indicadores:
            if indicador in titulo or indicador in conteudo:
                contadores += 1
        
        # Se cont√©m pelo menos 1 indicador, √© provavelmente uma portaria de naturaliza√ß√£o
        return contadores >= 1
    
    def analisar_portarias_encontradas(self, portarias: List[Dict]) -> pd.DataFrame:
        """
        Analisa as portarias encontradas e retorna um DataFrame com os dados
        
        Args:
            portarias: Lista de portarias encontradas
            
        Returns:
            DataFrame com dados das pessoas naturalizadas
        """
        print(f"üîç Analisando {len(portarias)} portarias encontradas...")
        
        todas_pessoas = []
        
        for i, portaria in enumerate(portarias, 1):
            print(f"\nüìã Analisando portaria {i}/{len(portarias)}")
            print(f"üìÖ Data: {portaria['data_publicacao']}")
            print(f"üîó URL: {portaria['url']}")
            
            try:
                # Analisar a portaria usando nosso sistema
                if portaria.get('conteudo'):
                    # Usar o conte√∫do direto se dispon√≠vel
                    resultados, _ = self.analyzer.analisar_multiplas_portarias(
                        portaria['conteudo'], 
                        gerar_excel=False
                    )
                else:
                    # Tentar buscar o conte√∫do da URL
                    resultados, _ = self.analyzer.analisar_portaria(
                        portaria['url'], 
                        gerar_excel=False
                    )
                
                # Processar resultados
                if isinstance(resultados, list):
                    for resultado in resultados:
                        if resultado.get('dados_portaria'):
                            dados = resultado['dados_portaria']
                            for pessoa in dados.get('pessoas', []):
                                pessoa_info = {
                                    'nome': pessoa.get('nome', ''),
                                    'documento': pessoa.get('documento', ''),
                                    'tipo_documento': pessoa.get('tipo_documento', ''),
                                    'processo': pessoa.get('processo', ''),
                                    'pais': pessoa.get('pais', ''),
                                    'estado': pessoa.get('estado', ''),
                                    'idade': pessoa.get('idade', ''),
                                    'data_nascimento': pessoa.get('data_nascimento', ''),
                                    'nome_pai': pessoa.get('nome_pai', ''),
                                    'numero_portaria': dados.get('numero', ''),
                                    'data_portaria': dados.get('data', ''),
                                    'tipo_naturalizacao': dados.get('tipo', ''),
                                    'data_publicacao_dou': portaria['data_publicacao'],
                                    'url_portaria': portaria['url']
                                }
                                todas_pessoas.append(pessoa_info)
                
            except Exception as e:
                print(f"‚ùå Erro ao analisar portaria: {e}")
                continue
        
        # Criar DataFrame
        if todas_pessoas:
            df = pd.DataFrame(todas_pessoas)
            print(f"‚úÖ Total de pessoas extra√≠das: {len(df)}")
            return df
        else:
            print("‚ùå Nenhuma pessoa foi extra√≠da")
            return pd.DataFrame()
    
    def gerar_planilha_periodo(self, data_inicio: str, data_fim: str, 
                              nome_arquivo: str = None) -> str:
        """
        Busca portarias de um per√≠odo e gera planilha com os dados
        
        Args:
            data_inicio: Data de in√≠cio (YYYY-MM-DD)
            data_fim: Data de fim (YYYY-MM-DD)
            nome_arquivo: Nome do arquivo de sa√≠da
            
        Returns:
            Caminho do arquivo gerado
        """
        print(f"üöÄ Iniciando busca autom√°tica de {data_inicio} at√© {data_fim}")
        
        # Primeiro tentar busca espec√≠fica (mais eficiente)
        print("üîç Tentando busca espec√≠fica (PORTARIA + Minist√©rio da Justi√ßa + Secretaria Nacional de Justi√ßa)...")
        portarias = self.buscar_portarias_especificas(data_inicio, data_fim)
        
        # Se n√£o encontrar nada, tentar busca geral
        if not portarias:
            print("‚ö†Ô∏è Busca espec√≠fica n√£o retornou resultados, tentando busca geral...")
            portarias = self.buscar_portarias_periodo(data_inicio, data_fim)
        
        if not portarias:
            print("‚ùå Nenhuma portaria encontrada no per√≠odo")
            return None
        
        # Analisar portarias
        df = self.analisar_portarias_encontradas(portarias)
        
        if df.empty:
            print("‚ùå Nenhum dado foi extra√≠do")
            return None
        
        # Gerar arquivo
        if nome_arquivo is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nome_arquivo = f"naturalizacoes_{data_inicio}_a_{data_fim}_{timestamp}.xlsx"
        
        # Salvar planilha
        df.to_excel(nome_arquivo, index=False, engine='openpyxl')
        
        print(f"‚úÖ Planilha gerada: {nome_arquivo}")
        print(f"üìä Total de registros: {len(df)}")
        
        return nome_arquivo

    def buscar_portarias_especificas(self, data_inicio: str, data_fim: str) -> List[Dict]:
        """
        Busca portarias de naturaliza√ß√£o usando filtros espec√≠ficos do DOU
        Simula o processo manual: PORTARIA + Minist√©rio da Justi√ßa + Portaria + Secretaria Nacional de Justi√ßa
        
        Args:
            data_inicio: Data de in√≠cio (YYYY-MM-DD)
            data_fim: Data de fim (YYYY-MM-DD)
            
        Returns:
            Lista de portarias encontradas
        """
        print(f"üîç Busca espec√≠fica: PORTARIA + Minist√©rio da Justi√ßa + Secretaria Nacional de Justi√ßa")
        print(f"üìÖ Per√≠odo: {data_inicio} at√© {data_fim}")
        
        portarias_encontradas = []
        
        try:
            # Busca espec√≠fica usando os filtros do DOU
            params = {
                'start_date': data_inicio,
                'end_date': data_fim,
                'keywords': 'PORTARIA',
                'gazettes': 'DOU',
                'size': 200,  # Aumentar para pegar mais resultados
                'organization': 'ministerio-da-justica-e-seguranca-publica',  # Minist√©rio da Justi√ßa
                'sub_organization': 'secretaria-nacional-de-justica',  # Secretaria Nacional de Justi√ßa
                'act_type': 'portaria'  # Tipo de ato: Portaria
            }
            
            print("üîç Fazendo busca com filtros espec√≠ficos...")
            response = requests.get(f"{self.base_url}/gazettes", params=params)
            
            if response.status_code == 200:
                dados = response.json()
                
                if 'results' in dados:
                    print(f"üìä Encontrados {len(dados['results'])} resultados")
                    
                    for resultado in dados['results']:
                        # Verificar se √© uma portaria de naturaliza√ß√£o
                        if self._eh_portaria_naturalizacao_especifica(resultado):
                            portaria_info = {
                                'url': resultado.get('url'),
                                'data_publicacao': resultado.get('date'),
                                'titulo': resultado.get('title', ''),
                                'conteudo': resultado.get('content', ''),
                                'palavra_encontrada': 'PORTARIA (filtro espec√≠fico)',
                                'organizacao': resultado.get('organization', ''),
                                'sub_organizacao': resultado.get('sub_organization', '')
                            }
                            portarias_encontradas.append(portaria_info)
                            print(f"‚úÖ Encontrada: {resultado.get('title', 'Sem t√≠tulo')}")
                else:
                    print("‚ùå Nenhum resultado encontrado na API")
            else:
                print(f"‚ùå Erro na API: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erro na busca espec√≠fica: {e}")
        
        print(f"üìä Total de portarias de naturaliza√ß√£o encontradas: {len(portarias_encontradas)}")
        return portarias_encontradas
    
    def _eh_portaria_naturalizacao_especifica(self, resultado: Dict) -> bool:
        """
        Verifica se √© uma portaria de naturaliza√ß√£o usando crit√©rios mais espec√≠ficos
        
        Args:
            resultado: Dicion√°rio com dados do resultado da busca
            
        Returns:
            True se for portaria de naturaliza√ß√£o
        """
        titulo = resultado.get('title', '').lower()
        conteudo = resultado.get('content', '').lower()
        
        # Palavras-chave espec√≠ficas para naturaliza√ß√£o
        palavras_naturalizacao = [
            'naturaliza√ß√£o',
            'naturalizacao',
            'nacionalidade brasileira',
            'art. 65',
            'art. 67',
            'art. 70',
            'deferimento',
            'naturalizar',
            'naturalizado',
            'naturalizada',
            'cidadania brasileira',
            'brasileiro nato',
            'brasileira nata',
            'processo de naturaliza√ß√£o',
            'concess√£o de nacionalidade',
            'concessao de nacionalidade',
            'estrangeiro',
            'estrangeira',
            'residente',
            'residente no brasil'
        ]
        
        # Verificar se cont√©m palavras relacionadas √† naturaliza√ß√£o
        for palavra in palavras_naturalizacao:
            if palavra in titulo or palavra in conteudo:
                return True
        
        return False
    
    def buscar_portarias_por_ano(self, ano: int) -> str:
        """
        Busca portarias de naturaliza√ß√£o de um ano espec√≠fico
        
        Args:
            ano: Ano para buscar (ex: 2024)
            
        Returns:
            Caminho do arquivo gerado
        """
        data_inicio = f"{ano}-01-01"
        data_fim = f"{ano}-12-31"
        
        print(f"üîç Buscando portarias de {ano}")
        
        # Primeiro tentar busca espec√≠fica
        portarias = self.buscar_portarias_especificas(data_inicio, data_fim)
        
        # Se n√£o encontrar nada, tentar busca geral
        if not portarias:
            print("‚ö†Ô∏è Busca espec√≠fica n√£o retornou resultados, tentando busca geral...")
            portarias = self.buscar_portarias_periodo(data_inicio, data_fim)
        
        if portarias:
            # Analisar portarias encontradas
            df = self.analisar_portarias_encontradas(portarias)
            
            if not df.empty:
                # Gerar arquivo
                nome_arquivo = f"naturalizacoes_{ano}.xlsx"
                df.to_excel(nome_arquivo, index=False, engine='openpyxl')
                
                print(f"‚úÖ Planilha gerada: {nome_arquivo}")
                print(f"üìä Total de registros: {len(df)}")
                
                return nome_arquivo
            else:
                print("‚ùå Nenhum dado foi extra√≠do das portarias")
                return None
        else:
            print(f"‚ùå Nenhuma portaria encontrada em {ano}")
            return None

def main():
    """Fun√ß√£o principal para teste"""
    print("üîç SISTEMA DE BUSCA AUTOM√ÅTICA DOU")
    print("=" * 50)
    
    buscador = BuscadorAutomaticoDOU()
    
    # Exemplo: buscar portarias de 2024
    data_inicio = "2024-01-01"
    data_fim = "2024-12-31"
    
    arquivo = buscador.gerar_planilha_periodo(data_inicio, data_fim)
    
    if arquivo:
        print(f"\nüéâ Busca conclu√≠da! Arquivo: {arquivo}")
    else:
        print("\n‚ùå Busca n√£o retornou resultados")

if __name__ == "__main__":
    main() 